[General]
network = Project5

sim-time-limit = 1250s
**.result-recording-modes = all
**.scalar-recording = true
# default queues
**.queue.typename = "EtherQosQueue"
**.queue.dataQueue.typename = "DropTailQueue"
**.queue.packetCapacity = 100
**.queue.dataQueue.packetCapacity = 100
# Enable OSPF on all routers
**.R*.hasOspf = true
**.R*.ospf.ospfConfig = xmldoc("OSPFConfig.xml")

[Config Apps]
**.H?.numApps = 3

# first app: Audio streaming
**.H1.app[0].typename = "UdpBasicBurst"
**.H1.app[0].destAddresses = "H2"
**.H1.app[0].chooseDestAddrMode = "once"
**.H1.app[0].destPort = 1000
**.H1.app[0].startTime = uniform(1s,2s)
**.H1.app[0].stopTime = 1200s
**.H1.app[0].messageLength = 172B # 160B voice + 12B Rtp header
**.H1.app[0].burstDuration = exponential(0.352s)
**.H1.app[0].sleepDuration = exponential(0.650s)
**.H1.app[0].sendInterval = 20ms
**.H2.app[0].typename = "UdpBasicBurst"
**.H2.app[0].localPort = 1000
**.H2.app[0].delayLimit = 0ms
**.H2.app[0].destAddresses = ""
**.H2.app[0].chooseDestAddrMode = "once"
**.H2.app[0].destPort = 0
**.H2.app[0].messageLength = 0B
**.H2.app[0].burstDuration = 0s
**.H2.app[0].sleepDuration = 0s
**.H2.app[0].sendInterval = 0ms

#second app: video
**.H1.app[1].typename = "UdpBasicApp"
**.H1.app[1].destPort = 2000
**.H1.app[1].startTime = uniform(1s,2s)
**.H1.app[1].stopTime = 1200s
**.H1.app[1].sendInterval = 40ms
**.H1.app[1].messageLength = 500B
**.H1.app[1].destAddresses = "H2"
**.H2.app[1].typename = "UdpSink" #"UdpEchoApp"
**.H2.app[1].localPort = 2000
#third app: tcp traffic
**.H1.app[2].typename = "TcpBasicClientApp"
**.H1.app[2].connectAddress = "H2"
**.H1.app[2].connectPort = 3000
**.H1.app[2].numRequestsPerSession = 1 # HTTP 1.0
**.H1.app[2].requestLength = 50B
**.H1.app[2].replyLength = 100B
**.H1.app[2].thinkTime = 40ms
**.H1.app[2].idleInterval = 10s
**.H1.app[2].stopTime = 1200s
**.H2.app[2].typename = "TcpGenericServerApp"
**.H2.app[2].localPort = 3000

[Config Exp]
**.edgeDatarate = 32kbps
**.coreDatarate = 16kbps
#Traffic Classifier and Marker
**.R1.eth[*].ingressTC.typename = "TC1"
**.R11.eth[*].ingressTC.typename = "TC1"
**.ingressTC.numClasses = 3
**.ingressTC.classifier.filters = xmldoc("filters.xml", "//experiment[@id='default']")
**.ingressTC.marker.dscps = "AF11 AF21 AF31 AF41 BE"
# statistics
**.H*.app[*].sentPk.result-recording-modes = count
**.H*.app[*].rcvdPk.result-recording-modes = count
**.H*.app[*].dropPk.result-recording-modes = vector
**.H*.app[*].endToEndDelay.result-recording-modes = vector # for computing median
**.R*.ppp[*].**Queue.rcvdPk.result-recording-modes = count
**.R*.ppp[*].**Queue.dropPk.result-recording-modes = count
**.R*.ppp[*].**Queue.queueLength.result-recording-modes = timeavg
**.R*.ppp[*].**Queue.queueingTime.result-recording-modes = vector # for computing median
**.R*.ppp[*].**Queue.*.scalar-recording = true
**.app[*].sentPk*.scalar-recording = true
**.app[*].rcvdPk*.scalar-recording = true
**.app[*].endToEndDelay*.scalar-recording = true
**.afQueue.*.scalar-recording = true

[Config Exp1DiffServ] # Diffserv Queuing
extends = Apps, Exp
**.R*.ppp[*].ppp.queue.typename = "DSQueue1" # Diffserv Queuing
**.R*.ppp[*].ppp.queue.packetCapacity = 100 
**.R*.ppp[*].ppp.queue.*.packetCapacity = 100
**.R*.ppp[*].ppp.queue.wrr.weights = "10 40 5 1 1"


[Config Exp2DropTail] # DropTail Queuing
extends = Apps, Exp
**.ppp[*].ppp.queue.typename = "DropTailQueue"
**.eth[*].mac.queue.typename = "EtherQosQueue"
**.eth[*].mac.queue.dataQueue.typename = "DropTailQueue"
**.queue.packetCapacity = 100
[Config PolicingAndShaping] 
# Traffic Shaping on egress Router R7 of Customer network
**.R5.ppp[2].egressTC.typename = "TrafficConditioner"

**.R5.ppp[2].egressTC.efMeter.cir = "20%"
**.R5.ppp[2].egressTC.efMeter.cbs = 50KiB
**.R5.ppp[2].egressTC.defaultMeter.cir = "30%"
**.R5.ppp[2].egressTC.defaultMeter.cbs = 2KiB
**.R5.ppp[2].egressTC.defaultMeter.ebs = 4KiB 
#Traffic Policing on ingress Router R8 of ISP Network
**.R8.ppp[0].ingressTC.typename = "TrafficConditioner"

**.R8.ppp[0].ingressTC.efMeter.cir = "10%"
**.R8.ppp[0].ingressTC.efMeter.cbs = 40KiB
**.R8.ppp[0].ingressTC.defaultMeter.cir = "25%"
**.R8.ppp[0].ingressTC.defaultMeter.cbs = 2KiB
**.R8.ppp[0].ingressTC.defaultMeter.ebs = 4KiB


[Config Exp3DropTailWithoutPolicingAndShaping] #Best Effort 
#description = "Best Effort Setup"
extends = Apps, Exp
**.ppp[*].ppp.queue.typename = "DropTailQueue"
**.eth[*].mac.queue.typename = "EtherQosQueue"
**.eth[*].mac.queue.dataQueue.typename = "DropTailQueue"
**.queue.packetCapacity = 100
 
[Config Exp4DropTailWithPolicingAndShaping] # Network with Policing and Shaping
#description = "Drop Tail Queueing With Traffic Policing and Shaping"
extends = Apps, Exp, PolicingAndShaping
**.ppp[*].ppp.queue.typename = "DropTailQueue"
**.eth[*].mac.queue.typename = "EtherQosQueue"
**.eth[*].mac.queue.dataQueue.typename = "DropTailQueue"
**.queue.packetCapacity = 100
 
[Config Exp5RoundRobinWithPolicingAndShaping] # Network with Policing,Shaping and queueing
#description = "Diffserv Queueing With Traffic Policing and Shaping"
extends = Apps, Exp, PolicingAndShaping
**.R*.ppp[*].ppp.queue.typename = "DSQueue1" #Diffserv Queuing
**.R*.ppp[*].ppp.queue.packetCapacity = 100 
**.R*.ppp[*].ppp.queue.*.packetCapacity = 100
**.R*.ppp[*].ppp.queue.wrr.weights = "10 40 5 1 1"
